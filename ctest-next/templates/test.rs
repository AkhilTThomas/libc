/* This file was autogenerated by ctest; do not modify directly */
{#- â†‘ Doesn't apply here, this is the template! +#}

{%- let ctx = self.template +%}

/// As this file is sometimes built using rustc, crate level attributes
/// are not allowed at the top-level, so we hack around this by keeping it
/// inside of a module.
mod generated_tests {
    #![allow(non_snake_case)]
    #![deny(improper_ctypes_definitions)]
    use std::ffi::CStr;
    use std::fmt::{Debug, LowerHex};
    use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
    use std::{mem, ptr, slice};

    use super::*;

    pub static FAILED: AtomicBool = AtomicBool::new(false);
    pub static NTESTS: AtomicUsize = AtomicUsize::new(0);

    /// Check that the value returned from the Rust and C side in a certain test is equivalent.
    ///
    /// Internally it will remember which checks failed and how many tests have been run.
    fn check_same<T: PartialEq + Debug>(rust: T, c: T, attr: &str) {
        if rust != c {
            eprintln!("bad {attr}: rust: {rust:?} != c {c:?}");
            FAILED.store(true, Ordering::Relaxed);
        } else {
            NTESTS.fetch_add(1, Ordering::Relaxed);
        }
    }

    /// Check that the value returned from the Rust and C side in a certain test is equivalent.
    ///
    /// Internally it will remember which checks failed and how many tests have been run. This
    /// method is the same as `check_same` but prints errors in bytes in hex.
    fn check_same_hex<T: PartialEq + LowerHex + Debug>(rust: T, c: T, attr: &str) {
        if rust != c {
            eprintln!("bad {attr}: rust: {rust:?} ({rust:#x}) != c {c:?} ({c:#x})");
            FAILED.store(true, Ordering::Relaxed);
        } else {
            NTESTS.fetch_add(1, Ordering::Relaxed);
        }
    }

    {%- for const_cstr in ctx.const_cstr_tests +%}

    // Test that the string constant is the same in both Rust and C.
    // While fat pointers can't be translated, we instead use * const c_char.
    pub fn {{ const_cstr.test_ident }}() {
        extern "C" {
            fn __{{ const_cstr.test_ident }}() -> *const *const u8;
        }
        let val = {{ const_cstr.rust_ident }};
        unsafe {
            let ptr = *__{{ const_cstr.test_ident }}();
            let val = CStr::from_ptr(ptr.cast::<c_char>());
            let val = val.to_str().expect("const {{ const_cstr.rust_ident }} not utf8");
            let c = ::std::ffi::CStr::from_ptr(ptr as *const _);
            let c = c.to_str().expect("const {{ const_cstr.rust_ident }} not utf8");
            check_same(val, c, "{{ const_cstr.rust_ident }} string");
        }
    }
    {%- endfor +%}

    {%- for constant in ctx.const_tests +%}

    // Test that the value of the constant is the same in both Rust and C.
    // This performs a byte by byte comparision of the constant value.
    pub fn {{ constant.test_ident }}() {
        extern "C" {
            fn __{{ constant.test_ident }}() -> *const {{ constant.rust_type }};
        }
        let val = {{ constant.rust_ident }};
        unsafe {
            let ptr1 = ptr::from_ref(&val).cast::<u8>();
            let ptr2 = __{{ constant.test_ident }}().cast::<u8>();
            let ptr1_bytes = slice::from_raw_parts(ptr1, mem::size_of::<{{ constant.rust_type }}>());
            let ptr2_bytes = slice::from_raw_parts(ptr2, mem::size_of::<{{ constant.rust_type }}>());
            for (i, (&b1, &b2)) in ptr1_bytes.iter().zip(ptr2_bytes.iter()).enumerate() {
                // HACK: This may read uninitialized data! We do this because
                // there isn't a good way to recursively iterate all fields.
                check_same_hex(b1, b2, &format!("{{ constant.rust_ident }} value at byte {}", i));
            }
        }
    }
    {%- endfor +%}
}

use generated_tests::*;

fn main() {
    println!("RUNNING ALL TESTS");
    run_all();
    if FAILED.load(std::sync::atomic::Ordering::Relaxed) {
        panic!("some tests failed");
    } else {
        println!(
            "PASSED {} tests",
            NTESTS.load(std::sync::atomic::Ordering::Relaxed)
        );
    }
}

// Run all tests by calling the functions that define them.
fn run_all() {
    {%- for test in ctx.test_idents +%}
    {{ test }}();
    {%- endfor +%}
}

